---
description: 
globs: 
alwaysApply: true
---
---
description: >
  Code formatting and organizational rules for the Emergency Healthcare
  Services Management System. Follows beginner-friendly conventions.
globs: ["**/*.js", "**/*.jsx", "**/*.ts", "**/*.tsx", "**/*.scss"]
alwaysApply: true
---
# Code Formatting Rules
- I am a beginner 

## Basic Formatting
- Indent with 2 spaces, not 4
- Use single quotes for strings
- Use semicolons at the end of statements
- Maximum line length: 80 characters
- No trailing whitespace

## Code Structure
- After typing {, immediately press Enter and place cursor inside
- Always press Enter after closing } to separate functions
- After completing statements with ;, press Enter for new line
- Leave one empty line after imports before code starts
- Move to new line after each method chain
- No space before function call parentheses
- index.js is the server file in backend(Backend/index.js)

## Import Rules
### In main.jsx (Centralized Imports)
- Import and export all React Router components
- Import and export all styling files (.scss)
- Import and export all layout components (Header, Footer, etc.)
- Import and export all page components for routing
- Import and export common utilities (axios, etc.)
- Import and export React hooks (useState, useEffect, etc.)
- Import and export common UI components
- Import and export context providers
- Import and export theme configurations

### In Component Files (Local Imports)
- Import React hooks if not using from main.jsx
- Import component-specific utilities
- Import component-specific types/interfaces
- Import component-specific constants
- Import component-specific assets
- Import component-specific styles if not using from main.jsx

### Import Organization
- Group imports in this order:
  1. React and React Router imports
  2. Third-party library imports
  3. Local component imports
  4. Style imports
- One import per line
- Use absolute imports when possible
- Keep imports at the top of the file
- Import only what you need in each file
- Use named imports for better tree-shaking

## Spacing
- One space after every comma
- One space after // in comments
- No space between function name and parentheses
- One space around operators (+, -, =, etc.)
- One space after colon in object properties

## File Organization
- Keep related files in their respective folders
- Use index.js as main server file
- Place SCSS files in stylesheet folder
- Place components in component folder
- Place pages in pages folder
- Place utilities in utils folder

## Import/Export
- Group imports by type (React, third-party, local)
- Use absolute imports when possible
- One import per line
- Sort imports alphabetically
- Use named exports for components

## React Specific
- Use functional components with hooks
- Use arrow functions for components
- Use destructuring for props
- Use PropTypes for type checking
- Use React.Fragment or <> for multiple elements

## API Calls
- After typing axios.get( or axios.post(, immediately add parentheses and braces
- Use async/await for API calls
- Handle errors properly with try/catch
- Use environment variables for API URLs
- Add proper headers and error handling

## Styling
- Use SCSS for styling
- Follow BEM naming convention
- Use variables for colors and common values
- Keep styles modular and scoped
- Use responsive design principles

## Best Practices
- Save (Ctrl+S) after every small change
- Use Shift+Alt+F for auto-formatting
- Fix red underlines (errors) immediately
- Use meaningful variable names
- Add comments for complex logic

Project Title: Emergency Healthcare Services Management System

AIM:
To develop a comprehensive web-based emergency healthcare services management system that:
1. Provides quick access to emergency healthcare services
2. Facilitates real-time communication between patients and healthcare providers
3. Streamlines the process of locating and accessing emergency medical resources
4. Enhances community support through blood donation management
5. Improves healthcare responsiveness through real-time updates and notifications

OBJECTIVES:

1. System Development
   - Develop a robust web application using React and Django
   - Implement secure user authentication and role-based access control
   - Create responsive and user-friendly interfaces

2. User Management
   - Implement multi-role user registration and authentication
   - Support for patients, ambulance providers, hospitals, blood banks, and administrators
   - Role-specific access control and permissions

3. Emergency Services Integration
   - Real-time ambulance tracking and availability updates
   - Location-based hospital service discovery
   - Integration with Google Maps for location services
   - Real-time service availability monitoring (beds, medications, doctors)

4. Blood Bank Management
   - Blood availability tracking and updates
   - Location-based blood bank discovery
   - Blood donation request system
   - SMS notification system for urgent blood needs

5. Medical Profile Management
   - Secure storage of patient medical history
   - Quick access to medical profiles during emergencies
   - Role-based access to medical information

6. Communication System
   - Real-time SMS notifications
   - Emergency alerts and updates
   - Status notifications for ambulance arrivals
   - Blood request notifications

7. Administrative Features
   - Comprehensive dashboard for system monitoring
   - Usage analytics and reporting
   - Service availability tracking
   - Response time monitoring
   - User management and system configuration

8. Security and Privacy
   - Secure data storage and transmission
   - Role-based access control
   - Patient data privacy protection
   - Secure authentication mechanisms

TECHNICAL REQUIREMENTS:

Frontend:
- React.js for user interface
- Responsive design for mobile and desktop
- Real-time updates using WebSocket
- Google Maps integration
- SMS notification integration

Backend:
- Django framework
- RESTful API architecture
- Real-time data processing
- Secure authentication system
- Database management
- SMS gateway integration

Database:
- User profiles and authentication
- Medical history records
- Service availability data
- Location information
- Notification logs
- System analytics

Security:
- HTTPS encryption
- JWT authentication
- Role-based access control
- Data encryption





- Secure API endpoints